doit_dev = "doit -t .doit-files/dev.doit"
doit_env = "doit -t .doit-files/env.doit"
doit_utl = "doit -t .doit-files/utl.doit"

init {
	@ Initializes the currently targetted module
	opt -s @ This is for my own environment to swap filesystems within WSL2
	opt -g @ This is to initlaize the global environment
	$$$
	if ( [ "$1" = "-s" ] || [ "$2" = "-s" ] ) && [ ! "$(pwd)" = "/mnt/c/Projects/dragonflagon-fvtt" ] ; then
		cd "/mnt/c/Projects/dragonflagon-fvtt"
	fi
	if [ "$1" = "-g" ] || [ "$2" = "-g" ]; then
		npm install
		exit
	fi
	cd $$($doit_env tgt -r) || exit
	if [ ! -e "include" ]; then exit 0 ; fi
	rm -Rf common/ || exit
	mkdir common/ || exit
	echo "Updating referenced common files"
	for item in $$(cat include || exit); do
		ln -s ../../common/$$item common/$$item || exit
	done
	$$$
}
clean {
	@ Cleans up the target module directory
	opt -g @ If specified, will remove the global build files/directories
	$$$
	if [ "$1" = "-g" ]; then
		echo "Cleaning global"
		rm -Rf node_modules
		rm -Rf release
		rm -f package-lock.json
		sleep 0.5 && rm -Rf .doit || echo "This failure may be due to a doit programming still running. Maybe you have 'doit launch' running in the background?" &
	else
		echo "Cleaning $$($doit_env tgt -r)"
		cd $$($doit_env tgt -r) || exit
		rm -Rf common
	fi
	$$$
}

dev {
	@ Copy the targetted module's data to the set foundry data directory
	$ $doit_dev dev $@
}

pack {
	@ Package the targetted module for release
	$ $doit_dev pack $@
}

tag {
	@ Tag the current commit for release of the currently targetted module
	$ $doit_dev tag $@
}

tgt {
	@ Get/Set the target module for development/release. If no target name is provided, it will print the current target.
	opt name @ name of the target to be set
	opt -r @ If you omit a name, this will print the current target raw.
	$ $doit_env tgt $@
}

env {
	@ Set the foundry environment
	req f-path @ Path to the Foundry Install directory
	req f-data @ Path to the Foundry Data directory
	$ $doit_env env $@
}

launch {
	@ Launch the foundry server
	$ sudo $$(which node) "$$(jq -r .foundry.path .devenv)/resources/app/main.js" --dataPath="$$(jq -r .foundry.data .devenv)"
}
