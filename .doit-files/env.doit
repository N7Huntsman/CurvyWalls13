doit_utl = "doit -t .doit-files/utl.doit"
json_set = doit_utl + " set_json_value"

tgt {
	@ Get/Set the target module for development/release. If no target name is provided, it will print the current target.
	opt name @ name of the target to be set
	opt -r @ If you omit a name, this will print the current target raw.
	$$$
	if [ "$#" -eq 0 ]; then
		echo "\e[32mCurrent Target: \e[34m$$(jq -r .module .devenv)\e[0m"
		exit 0
	elif [ "$#" -eq 1 ] && [ "$1" = "-r" ]; then
		echo -n "$$(jq -r .module .devenv)"
		exit 0
	fi
	doit clean
	$doit_utl gen_env_file
	$json_set .devenv .module "\"$$(basename $1)\""
	doit init
	echo "\e[32mTarget Set: \e[34m$$(jq -r .module .devenv)\e[0m"
	$$$
}

env {
	@ Set the foundry environment 
	req f-path @ Path to the Foundry Install directory (the application root)
	req f-data @ Path to the Foundry Data directory (the folder that contains 'modules', 'systems', 'worlds')
	$$$
	if [ "$#" -ne 0 ]; then
		$doit_utl gen_env_file
		$json_set .devenv .foundry.path '"$1"'
		$json_set .devenv .foundry.data '"$2"'
	fi
	echo "\e[32mFoundry Path: \e[34m$$(jq -r .foundry.path .devenv)\e[0m"
	echo "\e[32mFoundry Data: \e[34m$$(jq -r .foundry.data .devenv)\e[0m"
	$$$
}
