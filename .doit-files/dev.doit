doit_utl = "doit -t .doit-files/utl.doit"
doit_dev = "doit -t .doit-files/dev.doit"
doit_env = "doit -t .doit-files/env.doit"

date_string = "$(date +'%Y-%m-%d %H:%M:%S')"

dev {
	@ Copy the targetted module's data to the set foundry data directory
	opt module_name @ Provide the module name you wish to deploy instead of the current target
	$$$

	if [ "$#" -gt 1 ]; then
		echo "Too many arguments: $# arguments were provided when only 1 expected."
		exit 1
	elif [ "$#" -eq 1 ]; then
		original=`$doit_env tgt -r`
		$doit_env tgt "$1" > /dev/null
		echo "\e[90m$date_string\e[32m Override Target: \e[34m$$($doit_env tgt -r)\e[0m"
	fi
	module=`$doit_env tgt -r`
	fdata="$$(jq -r .foundry.data .devenv)/Data/modules/$$module"
	rm -Rf "$$fdata"
	cp -Lr "./$$module" "$$fdata"
	$doit_dev proc_sass "$$fdata"
	$doit_dev proc_module "$$fdata"
	echo "\e[90m$date_string\e[32m Copied \e[34m$$module\e[32m to \e[33m$$fdata"
	[ "$#" -eq 1 ] && $doit_env tgt "$$original" > /dev/null
	$$$
}
watch {
	$$$
	module=`$doit_env tgt -r`
	find "$$module"/* | entr $doit_dev dev
	$$$
}
pack {
	@ Package the targetted module for release
	$$$
	module=`jq -r .module .devenv`
	version=`jq -r .version "$$module/module.json"`
	dir="release/$${module}_$$version"
	rm -Rf "$$dir"
	rm -Rf "release/bundle"
	mkdir -p "release/bundle" || exit
	cp -Lr "$$module"/* "release/bundle/" || exit
	$doit_dev proc_sass "release/bundle" || exit
	$doit_dev proc_module "release/bundle" || exit

	mkdir -p "$$dir" && \
		cp "release/bundle/module.json" "$$dir" && \
	 	(cd "release/bundle" ; zip -r "../../$$dir/$$module.zip" "./") || exit
	rm -R "release/bundle" || exit

	if command -v -- explorer.exe > /dev/null 2>&1; then
		$doit_utl confirm '"Do you want to open the bundle in explorer?"' Y && explorer.exe "$$(wslpath -w "$$dir")"
	elif command -v -- browse > /dev/null 2>&1; then
		$doit_utl confirm '"Do you want to open the bundle in file browser?"' Y && browse "$$dir"
	elif command -v -- open > /dev/null 2>&1; then
		$doit_utl confirm '"Do you want to open the bundle in finder?"' Y && open "$$dir"
	fi
	$$$
}
proc_module {
%%%
import os
import glob
in_file = '$1'
out_file = '$2'
src_files = ',\n\t\t'.join([f'"{os.path.relpath(x, in_file)}"' for x in glob.glob(in_file + "/src/**/*.*js", recursive=True)] + [f'"{os.path.relpath(x, in_file)}"' for x in glob.glob(in_file + "/common/**/*.*js", recursive=True)])
css_files = ',\n\t'.join([f'"{os.path.relpath(x, in_file)}"' for x in glob.glob(in_file + "/css/**/*.css", recursive=True)])
if len(out_file) == 0:
	out_file = in_file
file = ''
with open(in_file + "/module.json", "r") as manifest:
	file = manifest.read()
file = file.replace("\"{{sources}}\"", f"[\n\t\t{src_files}\n\t]")
file = file.replace("\"{{css}}\"", f"[\n\t\t{css_files}\n\t]")
with open(out_file + "/module.json", "w") as manifest:
	manifest.write(file)
%%%
}

proc_sass {
%%%
import glob
import subprocess
from pathlib import Path
files = glob.glob("$1/css/*.scss", recursive=False)
if len(files) == 0:
	exit(0)
print("\033[90m$date_string\033[32m Processing SASS:\033[0m", end='')
args = ['npx', 'sass', '--no-source-map']
for file in files:
	filename = Path(file).stem
	args.append(f"{file}:$1/css/{filename}.css")
	print(f" {filename}.scss", end='')
print('')
subprocess.run(args)
%%%
}

tag {
	$$$
	MODULE_NAME=`jq -r .module .devenv`
	MODULE_VERS=`jq -r .version "$$MODULE_NAME/module.json"`
	TAG_NAME="$${MODULE_NAME}_$$MODULE_VERS"
	echo "Tagging $$TAG_NAME"
	git tag -d $$TAG_NAME 2>/dev/null
	git tag $$TAG_NAME && git push -f origin $$TAG_NAME
	echo "Tagged current commit as \"$$TAG_NAME\""
	$$$
}